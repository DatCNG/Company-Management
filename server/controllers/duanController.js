// server/controllers/duanController.js
const db = require("../config/db");

/**
 * === L·∫•y t·∫•t c·∫£ d·ª± √°n ===
 * GET /api/duan
 */
exports.getAllDuAn = async (req, res) => {
  try {
    const [rows] = await db.query(`
      SELECT da.*, nv.TenNV AS TenTruongDA
      FROM duan da
      LEFT JOIN nhanvien nv ON da.TruongDA = nv.MaNV
      ORDER BY da.MaDA ASC
    `);

    res.json(rows);
  } catch (err) {
    console.error("‚ùå L·ªói l·∫•y danh s√°ch d·ª± √°n:", err);
    res.status(500).json({ error: err.message });
  }
};

/**
 * === L·∫•y 1 d·ª± √°n theo m√£ ===
 * GET /api/duan/:id
 */
exports.getDuAnById = async (req, res) => {
  try {
    const [rows] = await db.query(
      `
      SELECT da.*, nv.TenNV AS TenTruongDA
      FROM duan da
      LEFT JOIN nhanvien nv ON da.TruongDA = nv.MaNV
      WHERE da.MaDA = ?
      `,
      [req.params.id]
    );

    if (rows.length === 0)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y d·ª± √°n!" });

    res.json(rows[0]);
  } catch (err) {
    console.error("‚ùå L·ªói l·∫•y d·ª± √°n:", err);
    res.status(500).json({ error: err.message });
  }
};

/**
 * === Th√™m d·ª± √°n (t·ª± t·∫°o m√£ DA) ===
 * POST /api/duan
 */
exports.createDuAn = async (req, res) => {
  try {
    const { TenDA, TruongDA, NgayBatDau, NgayKetThuc, TrangThai, MoTa } =
      req.body;

    if (!TenDA) {
      return res.status(400).json({ message: "Thi·∫øu t√™n d·ª± √°n!" });
    }

    // ‚úÖ T·∫°o m√£ DA t·ª± ƒë·ªông theo m√£ l·ªõn nh·∫•t
    const [rows] = await db.query(
      "SELECT MaDA FROM duan ORDER BY MaDA DESC LIMIT 1"
    );
    let nextId = 1;
    if (rows.length > 0) {
      const last = rows[0].MaDA.replace("DA", "");
      nextId = parseInt(last) + 1;
    }
    const MaDA = "DA" + nextId.toString().padStart(2, "0");

    // ‚úÖ Th√™m d·ª± √°n m·ªõi
    await db.query(
      `
      INSERT INTO duan (MaDA, TenDA, TruongDA, NgayBatDau, NgayKetThuc, TrangThai, MoTa)
      VALUES (?, ?, ?, ?, ?, ?, ?)
      `,
      [
        MaDA,
        TenDA,
        TruongDA || null,
        NgayBatDau || null,
        NgayKetThuc || null,
        TrangThai || 0,
        MoTa || null,
      ]
    );

    // ‚úÖ N·∫øu c√≥ tr∆∞·ªüng d·ª± √°n th√¨ c·∫≠p nh·∫≠t ch·ª©c v·ª•
    if (TruongDA) {
      await db.query(
        "UPDATE nhanvien SET ChucVu = 'Tr∆∞·ªüng d·ª± √°n' WHERE MaNV = ?",
        [TruongDA]
      );
    }

    res.status(201).json({ message: "‚úÖ Th√™m d·ª± √°n th√†nh c√¥ng!", MaDA });
  } catch (err) {
    console.error("‚ùå L·ªói khi th√™m d·ª± √°n:", err);
    res.status(500).json({ error: err.message });
  }
};

/**
 * === C·∫≠p nh·∫≠t d·ª± √°n ===
 * PUT /api/duan/:id
 */
exports.updateDuAn = async (req, res) => {
  try {
    const MaDA = req.params.id;
    const { TenDA, TruongDA, NgayBatDau, NgayKetThuc, TrangThai, MoTa } =
      req.body;

    // ‚úÖ Ki·ªÉm tra t·ªìn t·∫°i
    const [check] = await db.query("SELECT * FROM duan WHERE MaDA = ?", [MaDA]);
    if (check.length === 0)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y d·ª± √°n!" });

    const oldTruongDA = check[0].TruongDA;

    // ‚úÖ N·∫øu thay ƒë·ªïi tr∆∞·ªüng d·ª± √°n
    if (oldTruongDA && oldTruongDA !== TruongDA) {
      await db.query(
        "UPDATE nhanvien SET ChucVu = 'Nh√¢n vi√™n' WHERE MaNV = ?",
        [oldTruongDA]
      );
    }

    if (TruongDA) {
      await db.query(
        "UPDATE nhanvien SET ChucVu = 'Tr∆∞·ªüng d·ª± √°n' WHERE MaNV = ?",
        [TruongDA]
      );
    }

    // ‚úÖ C·∫≠p nh·∫≠t d·ªØ li·ªáu
    await db.query(
      `
      UPDATE duan
      SET TenDA = ?, TruongDA = ?, NgayBatDau = ?, NgayKetThuc = ?, TrangThai = ?, MoTa = ?
      WHERE MaDA = ?
      `,
      [
        TenDA,
        TruongDA || null,
        NgayBatDau || null,
        NgayKetThuc || null,
        TrangThai || 0,
        MoTa || null,
        MaDA,
      ]
    );

    res.json({ message: "‚úÖ C·∫≠p nh·∫≠t d·ª± √°n v√† ch·ª©c v·ª• nh√¢n vi√™n th√†nh c√¥ng!" });
  } catch (err) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t d·ª± √°n:", err);
    res.status(500).json({ error: err.message });
  }
};

/**
 * === X√≥a d·ª± √°n ===
 * DELETE /api/duan/:id
 */
exports.deleteDuAn = async (req, res) => {
  try {
    const MaDA = req.params.id;

    // ‚úÖ Ki·ªÉm tra t·ªìn t·∫°i
    const [rows] = await db.query("SELECT * FROM duan WHERE MaDA = ?", [MaDA]);
    if (rows.length === 0)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y d·ª± √°n!" });

    const TruongDA = rows[0].TruongDA;

    // ‚úÖ N·∫øu c√≥ tr∆∞·ªüng d·ª± √°n th√¨ h·∫° ch·ª©c v·ª•
    if (TruongDA) {
      await db.query(
        "UPDATE nhanvien SET ChucVu = 'Nh√¢n vi√™n' WHERE MaNV = ?",
        [TruongDA]
      );
    }

    // ‚úÖ X√≥a c√°c c√¥ng vi·ªác & ph√¢n c√¥ng li√™n quan
    await db.query(
      "DELETE FROM phancong WHERE MaCV IN (SELECT MaCV FROM congviec WHERE MaDA = ?)",
      [MaDA]
    );
    await db.query("DELETE FROM congviec WHERE MaDA = ?", [MaDA]);
    await db.query("DELETE FROM thanhvienda WHERE MaDA = ?", [MaDA]);

    // ‚úÖ X√≥a d·ª± √°n
    await db.query("DELETE FROM duan WHERE MaDA = ?", [MaDA]);

    res.json({
      message: "üóëÔ∏è ƒê√£ x√≥a d·ª± √°n v√† c·∫≠p nh·∫≠t ch·ª©c v·ª• nh√¢n vi√™n li√™n quan!",
    });
  } catch (err) {
    console.error("‚ùå L·ªói x√≥a d·ª± √°n:", err);
    res.status(500).json({ error: err.message });
  }
};

/**
 * === C·∫≠p nh·∫≠t Tr∆∞·ªüng d·ª± √°n ===
 * PUT /api/duan/:MaDA/truongda
 */
exports.updateTruongDA = async (req, res) => {
  try {
    const { MaDA } = req.params;
    const { MaNV } = req.body; // nh√¢n vi√™n ƒë∆∞·ª£c ch·ªçn l√†m tr∆∞·ªüng d·ª± √°n

    if (!MaDA || !MaNV)
      return res
        .status(400)
        .json({ message: "Thi·∫øu m√£ d·ª± √°n ho·∫∑c m√£ nh√¢n vi√™n!" });

    // ‚úÖ L·∫•y tr∆∞·ªüng d·ª± √°n hi·ªán t·∫°i
    const [oldRows] = await db.query(
      "SELECT TruongDA FROM duan WHERE MaDA = ?",
      [MaDA]
    );
    const oldTruongDA = oldRows[0]?.TruongDA;

    // ‚úÖ C·∫≠p nh·∫≠t tr∆∞·ªüng d·ª± √°n m·ªõi
    await db.query("UPDATE duan SET TruongDA = ? WHERE MaDA = ?", [MaNV, MaDA]);

    // ‚úÖ H·∫° ch·ª©c v·ª• ng∆∞·ªùi c≈© (n·∫øu kh√°c ng∆∞·ªùi m·ªõi)
    if (oldTruongDA && oldTruongDA !== MaNV) {
      await db.query(
        "UPDATE nhanvien SET ChucVu = 'Nh√¢n vi√™n' WHERE MaNV = ?",
        [oldTruongDA]
      );
    }

    // ‚úÖ N√¢ng ch·ª©c v·ª• ng∆∞·ªùi m·ªõi
    await db.query(
      "UPDATE nhanvien SET ChucVu = 'Tr∆∞·ªüng d·ª± √°n' WHERE MaNV = ?",
      [MaNV]
    );

    res.json({
      message:
        "‚úÖ C·∫≠p nh·∫≠t tr∆∞·ªüng d·ª± √°n th√†nh c√¥ng v√† ƒë·ªìng b·ªô ch·ª©c v·ª• nh√¢n vi√™n!",
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr∆∞·ªüng d·ª± √°n:", err);
    res.status(500).json({ error: err.message });
  }
};
