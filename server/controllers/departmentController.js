const db = require("../config/db");

// === L·∫•y t·∫•t c·∫£ ph√≤ng ban ===
exports.getAllDepartments = async (req, res) => {
  try {
    const [rows] = await db.query(`
      SELECT pb.*, ct.TenCT, nv.TenNV AS TruongPhongTen
      FROM phongban pb
      LEFT JOIN congty ct ON pb.MaCT = ct.MaCT
      LEFT JOIN nhanvien nv ON pb.TruongPhong = nv.MaNV
      ORDER BY pb.MaPB ASC
    `);
    res.json(rows);
  } catch (err) {
    console.error("‚ùå L·ªói l·∫•y danh s√°ch ph√≤ng ban:", err);
    res.status(500).json({ error: err.message });
  }
};

// === L·∫•y 1 ph√≤ng ban theo m√£ ===
exports.getDepartmentById = async (req, res) => {
  try {
    const [rows] = await db.query(
      `
      SELECT pb.*, ct.TenCT, nv.TenNV AS TruongPhongTen
      FROM phongban pb
      LEFT JOIN congty ct ON pb.MaCT = ct.MaCT
      LEFT JOIN nhanvien nv ON pb.TruongPhong = nv.MaNV
      WHERE pb.MaPB = ?
      `,
      [req.params.id]
    );

    if (rows.length === 0)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ph√≤ng ban!" });

    res.json(rows[0]);
  } catch (err) {
    console.error("‚ùå L·ªói l·∫•y ph√≤ng ban:", err);
    res.status(500).json({ error: err.message });
  }
};

// === Th√™m ph√≤ng ban (t·ª± ƒë·ªông t·∫°o MaPB) ===
exports.createDepartment = async (req, res) => {
  try {
    const { TenPB, MoTa, MaCT, TruongPhong } = req.body;

    if (!TenPB || !MaCT) {
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc!" });
    }

    // ‚úÖ T·∫°o m√£ PB t·ª± ƒë·ªông theo m√£ l·ªõn nh·∫•t
    const [rows] = await db.query(
      "SELECT MaPB FROM phongban ORDER BY MaPB DESC LIMIT 1"
    );
    let nextId = 1;
    if (rows.length > 0) {
      const last = rows[0].MaPB.replace("PB", "");
      nextId = parseInt(last) + 1;
    }
    const MaPB = "PB" + nextId.toString().padStart(2, "0");

    await db.query(
      `
      INSERT INTO phongban (MaPB, TenPB, MoTa, MaCT, TruongPhong)
      VALUES (?, ?, ?, ?, ?)
      `,
      [MaPB, TenPB, MoTa, MaCT, TruongPhong || null]
    );

    res.status(201).json({ message: "‚úÖ Th√™m ph√≤ng ban th√†nh c√¥ng!", MaPB });
  } catch (err) {
    console.error("‚ùå L·ªói khi th√™m ph√≤ng ban:", err);
    res.status(500).json({ error: err.message });
  }
};

// === C·∫≠p nh·∫≠t ph√≤ng ban ===
exports.updateDepartment = async (req, res) => {
  try {
    const { TenPB, MoTa, MaCT, TruongPhong } = req.body;
    const MaPB = req.params.id;

    // Ki·ªÉm tra t·ªìn t·∫°i
    const [check] = await db.query("SELECT * FROM phongban WHERE MaPB = ?", [
      MaPB,
    ]);
    if (check.length === 0)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ph√≤ng ban!" });

    const oldTP = check[0].TruongPhong; // Tr∆∞·ªüng ph√≤ng c≈©

    // ‚úÖ N·∫øu tr∆∞·ªüng ph√≤ng thay ƒë·ªïi
    if (oldTP && oldTP !== TruongPhong) {
      // G√°n nh√¢n vi√™n c≈© v·ªÅ "Nh√¢n vi√™n"
      await db.query(
        "UPDATE nhanvien SET ChucVu = 'Nh√¢n vi√™n' WHERE MaNV = ?",
        [oldTP]
      );
    }

    if (TruongPhong) {
      // G√°n nh√¢n vi√™n m·ªõi l√† "Tr∆∞·ªüng ph√≤ng"
      await db.query(
        "UPDATE nhanvien SET ChucVu = 'Tr∆∞·ªüng ph√≤ng' WHERE MaNV = ?",
        [TruongPhong]
      );
    }

    // ‚úÖ C·∫≠p nh·∫≠t th√¥ng tin ph√≤ng ban
    await db.query(
      `
      UPDATE phongban
      SET TenPB = ?, MoTa = ?, MaCT = ?, TruongPhong = ?
      WHERE MaPB = ?
      `,
      [TenPB, MoTa, MaCT, TruongPhong || null, MaPB]
    );

    res.json({
      message: "‚úÖ C·∫≠p nh·∫≠t ph√≤ng ban v√† ƒë·ªìng b·ªô ch·ª©c v·ª• nh√¢n vi√™n!",
    });
  } catch (err) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t ph√≤ng ban:", err);
    res.status(500).json({ error: err.message });
  }
};
exports.deleteDepartment = async (req, res) => {
  try {
    const MaPB = req.params.id;

    // Ki·ªÉm tra t·ªìn t·∫°i
    const [rows] = await db.query("SELECT * FROM phongban WHERE MaPB = ?", [
      MaPB,
    ]);
    if (rows.length === 0)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ph√≤ng ban!" });

    const TruongPhong = rows[0].TruongPhong;

    // ‚úÖ N·∫øu c√≥ tr∆∞·ªüng ph√≤ng th√¨ g√°n l·∫°i ch·ª©c v·ª•
    if (TruongPhong) {
      await db.query(
        "UPDATE nhanvien SET ChucVu = 'Nh√¢n vi√™n' WHERE MaNV = ?",
        [TruongPhong]
      );
    }

    // C·∫≠p nh·∫≠t nh√¢n vi√™n thu·ªôc ph√≤ng n√†y -> null
    await db.query("UPDATE nhanvien SET MaPB = NULL WHERE MaPB = ?", [MaPB]);

    // X√≥a ph√≤ng ban
    await db.query("DELETE FROM phongban WHERE MaPB = ?", [MaPB]);

    res.json({
      message: "üóëÔ∏è ƒê√£ x√≥a ph√≤ng ban v√† c·∫≠p nh·∫≠t ch·ª©c v·ª• nh√¢n vi√™n li√™n quan!",
    });
  } catch (err) {
    console.error("‚ùå L·ªói x√≥a ph√≤ng ban:", err);
    res.status(500).json({ error: err.message });
  }
};

// === C·∫≠p nh·∫≠t Tr∆∞·ªüng ph√≤ng (v√† c·∫≠p nh·∫≠t ch·ª©c v·ª• nh√¢n vi√™n) ===
exports.updateTruongPhong = async (req, res) => {
  try {
    const { MaPB } = req.params; // M√£ ph√≤ng ban
    const { MaNV } = req.body; // Nh√¢n vi√™n ƒë∆∞·ª£c ch·ªçn l√†m tr∆∞·ªüng ph√≤ng

    if (!MaPB || !MaNV) {
      return res
        .status(400)
        .json({ message: "Thi·∫øu m√£ ph√≤ng ban ho·∫∑c m√£ nh√¢n vi√™n!" });
    }

    // üîç L·∫•y tr∆∞·ªüng ph√≤ng hi·ªán t·∫°i (n·∫øu c√≥)
    const [oldRows] = await db.query(
      "SELECT TruongPhong FROM phongban WHERE MaPB = ?",
      [MaPB]
    );
    const oldTruongPhong = oldRows[0]?.TruongPhong;

    // ‚úÖ C·∫≠p nh·∫≠t tr∆∞·ªüng ph√≤ng m·ªõi cho ph√≤ng ban
    await db.query("UPDATE phongban SET TruongPhong = ? WHERE MaPB = ?", [
      MaNV,
      MaPB,
    ]);

    // üîÅ N·∫øu c√≥ ng∆∞·ªùi c≈© kh√°c ng∆∞·ªùi m·ªõi ‚Üí h·∫° ch·ª©c v·ª• xu·ªëng ‚ÄúNh√¢n vi√™n‚Äù
    if (oldTruongPhong && oldTruongPhong !== MaNV) {
      await db.query(
        "UPDATE nhanvien SET ChucVu = 'Nh√¢n vi√™n' WHERE MaNV = ?",
        [oldTruongPhong]
      );
    }

    // ‚úÖ N√¢ng ch·ª©c v·ª• ng∆∞·ªùi m·ªõi l√™n ‚ÄúTr∆∞·ªüng ph√≤ng‚Äù
    await db.query(
      "UPDATE nhanvien SET ChucVu = 'Tr∆∞·ªüng ph√≤ng' WHERE MaNV = ?",
      [MaNV]
    );

    res.json({
      message:
        "‚úÖ C·∫≠p nh·∫≠t tr∆∞·ªüng ph√≤ng th√†nh c√¥ng v√† ƒë√£ ƒë·ªïi ch·ª©c v·ª• nh√¢n vi√™n!",
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr∆∞·ªüng ph√≤ng:", err);
    res.status(500).json({ error: err.message });
  }
};
