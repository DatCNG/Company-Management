import React, { useEffect, useState } from "react";
import { CKEditor } from "@ckeditor/ckeditor5-react";
import ClassicEditor from "@ckeditor/ckeditor5-build-classic";
import axios from "axios";
import "../styles/style.css";
import { FiEdit2 } from "react-icons/fi";

const SuaPhongBan = ({ data, onClose = () => {}, onUpdated = () => {} }) => {
  const [tenPB, setTenPB] = useState("");
  const [moTa, setMoTa] = useState("");
  const [maCT, setMaCT] = useState("");
  const [truongPhong, setTruongPhong] = useState("");

  const [companies, setCompanies] = useState([]);
  const [employees, setEmployees] = useState([]);

  const API_URL = "http://localhost:5000/api/departments";

  // üß≠ L·∫•y d·ªØ li·ªáu khi m·ªü form
  useEffect(() => {
    const fetchData = async () => {
      try {
        // 1Ô∏è‚É£ L·∫•y danh s√°ch c√¥ng ty + nh√¢n vi√™n
        const [ctRes, nvRes] = await Promise.all([
          axios.get("http://localhost:5000/api/companies"),
          axios.get("http://localhost:5000/api/employees"),
        ]);
        setCompanies(ctRes.data);
        setEmployees(nvRes.data);

        // 2Ô∏è‚É£ L·∫•y chi ti·∫øt ph√≤ng ban
        if (data?.MaPB) {
          const res = await axios.get(`${API_URL}/${data.MaPB}`);
          const pb = res.data;
          setTenPB(pb.TenPB || "");
          setMoTa(pb.MoTa || "");
          setMaCT(pb.MaCT || "");
          setTruongPhong(pb.TruongPhong || "");
        }
      } catch (err) {
        console.error("‚ùå L·ªói t·∫£i d·ªØ li·ªáu:", err);
      }
    };
    fetchData();
  }, [data]);

  // üß© C·∫≠p nh·∫≠t ph√≤ng ban
  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!tenPB.trim() || !maCT) {
      alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p t√™n ph√≤ng ban v√† ch·ªçn c√¥ng ty!");
      return;
    }

    try {
      // ‚úÖ C·∫≠p nh·∫≠t th√¥ng tin ph√≤ng ban (tr·ª´ tr∆∞·ªüng ph√≤ng)
      await axios.put(`${API_URL}/${data.MaPB}`, {
        TenPB: tenPB.trim(),
        MoTa: moTa,
        MaCT: maCT,
        TruongPhong: truongPhong || null,
      });

      // ‚úÖ N·∫øu ch·ªçn tr∆∞·ªüng ph√≤ng m·ªõi ‚Üí g·ªçi API chuy√™n d·ª•ng ƒë·ªÉ c·∫≠p nh·∫≠t ch·ª©c v·ª•
      if (truongPhong) {
        await axios.put(`${API_URL}/${data.MaPB}/truongphong`, {
          MaNV: truongPhong,
        });
      }

      alert("‚úÖ C·∫≠p nh·∫≠t ph√≤ng ban th√†nh c√¥ng!");
      onUpdated();
      onClose();
    } catch (err) {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t ph√≤ng ban:", err);
      alert("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ph√≤ng ban!");
    }
  };

  return (
    <div className="quanly-container qlct-container">
      <div className="them-body themct-body">
        <form className="form themct-form" onSubmit={handleSubmit}>
          {/* M√£ & t√™n ph√≤ng ban */}
          <div className="form-gr">
            <div className="form-gr-content">
              <label className="label">M√£ ph√≤ng ban:</label>
              <input
                type="text"
                className="input"
                value={data?.MaPB || ""}
                disabled
              />
            </div>
            <div className="form-gr-content">
              <label className="label">T√™n ph√≤ng ban:</label>
              <input
                type="text"
                className="input"
                placeholder="Nh·∫≠p t√™n ph√≤ng ban..."
                value={tenPB}
                onChange={(e) => setTenPB(e.target.value)}
                required
              />
            </div>
          </div>

          {/* Thu·ªôc c√¥ng ty */}
          <div className="form-gr">
            <div className="form-gr-content">
              <label className="label">Thu·ªôc c√¥ng ty:</label>
              <select
                className="select"
                value={maCT}
                onChange={(e) => setMaCT(e.target.value)}
                required
              >
                <option value="">-- Ch·ªçn c√¥ng ty --</option>
                {companies.map((ct) => (
                  <option key={ct.MaCT} value={ct.MaCT}>
                    {ct.TenCT}
                  </option>
                ))}
              </select>
            </div>
          </div>

          {/* Tr∆∞·ªüng ph√≤ng */}
          <div className="form-gr">
            <div className="form-gr-content">
              <label className="label">Tr∆∞·ªüng ph√≤ng:</label>
              <select
                className="select"
                value={truongPhong}
                onChange={(e) => setTruongPhong(e.target.value)}
              >
                <option value="">-- Ch∆∞a ch·ªçn --</option>
                {employees.map((nv) => (
                  <option key={nv.MaNV} value={nv.MaNV}>
                    {nv.TenNV}
                  </option>
                ))}
              </select>
            </div>
          </div>

          {/* M√¥ t·∫£ */}
          <div className="form-gr">
            <div
              className="form-gr-content"
              style={{ flexDirection: "column" }}
            >
              <label className="label">M√¥ t·∫£:</label>
              <CKEditor
                editor={ClassicEditor}
                data={moTa}
                onChange={(_, editor) => setMoTa(editor.getData())}
                config={{
                  toolbar: [
                    "heading",
                    "|",
                    "bold",
                    "italic",
                    "underline",
                    "link",
                    "|",
                    "bulletedList",
                    "numberedList",
                    "blockQuote",
                    "|",
                    "insertTable",
                    "undo",
                    "redo",
                  ],
                }}
              />
            </div>
          </div>

          {/* N√∫t thao t√°c */}
          <div className="button-group">
            <button type="button" className="button-cancel" onClick={onClose}>
              H·ªßy
            </button>
            <button type="submit" className="button-add">
              <FiEdit2 style={{ marginRight: "5px" }} /> S·ª≠a ph√≤ng ban
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default SuaPhongBan;
